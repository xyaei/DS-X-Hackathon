analyzer.py
import os
import json
import pandas as pd
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Import prompts directly (no relative imports)
CAREER_ANALYSIS_PROMPT = """
You are Career Compass, an expert AI career advisor with deep knowledge of job markets, skills trends, and career progression.

RESUME CONTENT:
{resume_text}

USER'S CURRENT SKILLS:
{user_skills}

TARGET ROLE CONTEXT:
{target_role}

Based on this information, provide a comprehensive career analysis.

Format your response as valid JSON only, no additional text:

{{
    "skill_gaps": {{
        "technical": ["skill1", "skill2", "skill3"],
        "soft_skills": ["skill1", "skill2"],
        "severity": "Medium"
    }},
    "career_path": {{
        "immediate": {{
            "role": "Job Title",
            "requirements": ["req1", "req2"],
            "salary_range": "$X-$Y"
        }},
        "mid_term": {{
            "role": "Job Title", 
            "requirements": ["req1", "req2"],
            "salary_range": "$X-$Y"
        }},
        "long_term": {{
            "role": "Job Title",
            "requirements": ["req1", "req2"], 
            "salary_range": "$X-$Y"
        }}
    }},
    "learning_roadmap": {{
        "courses": [
            {{
                "name": "Course Name",
                "platform": "Platform",
                "duration": "X weeks/months"
            }}
        ],
        "projects": ["project1", "project2"],
        "resources": ["resource1", "resource2"],
        "timeline": "3-6 months for basic proficiency"
    }},
    "market_insights": {{
        "demand_trend": "Growing",
        "emerging_tech": ["tech1", "tech2"],
        "industry_advice": "Specific advice here"
    }}
}}
"""

TREND_ANALYSIS_PROMPT = """
Analyze the skill evolution for {role} between {start_year} and {end_year}.

Return as JSON analysis.
"""

class CareerAnalyzer:
    def __init__(self, model="gpt-3.5-turbo"):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")
        
        self.client = OpenAI(api_key=api_key)
        self.model = model
        
    def analyze_resume(self, resume_text, user_skills, target_role="Data Analyst"):
        """Analyze a resume and provide career insights"""
        
        prompt = CAREER_ANALYSIS_PROMPT.format(
            resume_text=resume_text[:3000],  # Limit length
            user_skills=", ".join(user_skills),
            target_role=target_role
        )
        
        try:
            print("ü§ñ Calling OpenAI API...")
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "You are a expert career advisor. Always return valid JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1500
            )
            
            analysis_text = response.choices[0].message.content
            print("‚úÖ OpenAI response received")
            return json.loads(analysis_text)
            
        except Exception as e:
            print(f"‚ùå LLM Analysis failed: {e}")
            return self._get_fallback_analysis(user_skills, target_role)
    
    def analyze_trends(self, role_data, role_name, start_year=2018, end_year=2024):
        """Analyze skill trends for a specific role"""
        return self._get_fallback_trends(role_name)
    
    def _get_fallback_analysis(self, user_skills, target_role):
        """Provide fallback analysis when LLM fails"""
        return {
            "skill_gaps": {
                "technical": ["SQL", "Python", "Tableau"],
                "soft_skills": ["Communication", "Problem Solving"],
                "severity": "Medium"
            },
            "career_path": {
                "immediate": {
                    "role": f"Junior {target_role}",
                    "requirements": ["Build portfolio", "Learn core skills"],
                    "salary_range": "$60k-$80k"
                },
                "mid_term": {
                    "role": f"Senior {target_role}",
                    "requirements": ["Advanced skills", "Project leadership"],
                    "salary_range": "$90k-$120k"
                },
                "long_term": {
                    "role": f"{target_role} Manager",
                    "requirements": ["Team management", "Strategy"],
                    "salary_range": "$130k-$160k"
                }
            },
            "learning_roadmap": {
                "courses": [
                    {
                        "name": f"{target_role} Fundamentals",
                        "platform": "Coursera",
                        "duration": "3 months"
                    }
                ],
                "projects": ["Build a portfolio project", "Contribute to open source"],
                "resources": ["Industry blogs", "Professional networking"],
                "timeline": "6-12 months for career transition"
            },
            "market_insights": {
                "demand_trend": "Growing",
                "emerging_tech": ["AI Integration", "Cloud Computing"],
                "industry_advice": "Focus on practical projects and continuous learning"
            }
        }
    
    def _get_fallback_trends(self, role_name):
        """Provide fallback trend analysis"""
        return {
            "emerging_skills": [
                {"skill": "AI/ML", "growth": "Rapid adoption", "impact": "High"}
            ],
            "core_skills": ["Problem Solving", "Communication"],
            "salary_impact": "AI skills command 20-30% premium"
        }

api.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from llm.analyzer import CareerAnalyzer
import pandas as pd
import json

app = FastAPI(title="Career Compass LLM API")
analyzer = CareerAnalyzer()

# Load data once at startup
try:
    df = pd.read_csv("../data/cleaned_resumes.csv")
    print(f"‚úÖ API loaded {len(df)} resumes")
except:
    df = None
    print("‚ö†Ô∏è No resume data loaded")

class ResumeAnalysisRequest(BaseModel):
    resume_text: str
    skills: list
    target_role: str = "Data Analyst"

class TrendAnalysisRequest(BaseModel):
    role: str
    start_year: int = 2018
    end_year: int = 2024

@app.get("/")
async def root():
    return {"message": "Career Compass LLM API", "status": "active"}

@app.post("/analyze-resume")
async def analyze_resume(request: ResumeAnalysisRequest):
    """Analyze a resume and provide career insights"""
    try:
        analysis = analyzer.analyze_resume(
            request.resume_text,
            request.skills,
            request.target_role
        )
        return {
            "status": "success",
            "analysis": analysis,
            "role": request.target_role
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/analyze-trends/{role}")
async def analyze_trends(role: str):
    """Analyze skill trends for a specific role"""
    if df is None:
        raise HTTPException(status_code=500, detail="No resume data available")
    
    try:
        # Filter data for the role
        role_data = df[df['positions'].str.contains(role, case=False, na=False)]
        
        if len(role_data) == 0:
            return {
                "status": "success",
                "message": f"No data found for {role}, using general trends",
                "trends": analyzer._get_fallback_trends(role)
            }
        
        trends = analyzer.analyze_trends(role_data, role)
        return {
            "status": "success",
            "role": role,
            "profile_count": len(role_data),
            "trends": trends
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/sample-resumes")
async def get_sample_resumes(count: int = 5):
    """Get sample resumes for testing"""
    if df is None:
        raise HTTPException(status_code=500, detail="No resume data available")
    
    samples = df.head(count)[['resume_text', 'extracted_skills', 'positions']].to_dict('records')
    return {
        "status": "success",
        "count": len(samples),
        "samples": samples
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)



